{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0f6e1575-84db-40de-81e3-a196fe316618",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import speech_recognition as sr\n",
    "# import pyttsx3\n",
    "# import webbrowser\n",
    "# import Music_library\n",
    "# # pip install pocketsphinx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7edc1587-78f9-4511-84fa-e84934bbbd83",
   "metadata": {},
   "outputs": [],
   "source": [
    "# recogniser = sr.Recognizer\n",
    "# engine = pyttsx3.init()\n",
    "\n",
    "# def speak(text):\n",
    "#     engine.say(text)\n",
    "#     engine.runAndWait()\n",
    "# def processcommand(c):\n",
    "#     if \"open google\" in c.lower():\n",
    "#         webbrowser.open(\"https://google.com/\")\n",
    "#     elif \"open youtube\" in c.lower():\n",
    "#         webbrowser.open(\"https://youtube.com/\")\n",
    "#     elif c.lower().startswith(\"play\"):\n",
    "#         song = c.lower().split(\" \")[1]\n",
    "#         if song in Music_library.music:\n",
    "#             link = Music_library.music[song]\n",
    "#             webbrowser.open(link)\n",
    "#         else:\n",
    "#             speak(\"No such song is present in music library\")\n",
    "# if __name__ == \"__main__\":\n",
    "#     speak(\"Initialising\")\n",
    "#     while True:\n",
    "#         r = sr.Recognizer()\n",
    "        \n",
    "    \n",
    "#         # print(\"Recognising...\")\n",
    "#         # try:\n",
    "#         #     with sr.Microphone() as source:\n",
    "#         #         print(\"Listining...\")\n",
    "#         #         audio = r.listen(source, timeout=2, phrase_time_limit=2)\n",
    "#         #     word = r.recognize_google(audio)\n",
    "#         #     if (word.lower() == \"hello\"):\n",
    "#         #         speak(\"suu che\")\n",
    "#         #         with sr.Microphone() as source:\n",
    "#         #             print(\"Friday is active...\")\n",
    "#         #             audio = r.listen(source, timeout=2, phrase_time_limit=1)\n",
    "#         #         command = r.recognize_google(audio)\n",
    "#         #         processcommand(command)\n",
    "#         #     elif (word.lower() == \"Ohkay\"):\n",
    "#         #         speak(\"its my job my sir\")\n",
    "#         print(\"Recognizing...\")\n",
    "#         try:\n",
    "#             with sr.Microphone() as source:\n",
    "#                 print(\"Listening...\")\n",
    "#                 audio = r.listen(source, timeout=5, phrase_time_limit=5)\n",
    "#             word = r.recognize_google(audio)\n",
    "#             print(f\"Recognized word: {word}\")\n",
    "\n",
    "#             if word.lower() == \"hello\":\n",
    "#                 speak(\"suu che\")\n",
    "#                 with sr.Microphone() as source:\n",
    "#                     print(\"Friday is active...\")\n",
    "#                     audio = r.listen(source, timeout=5, phrase_time_limit=5)\n",
    "#                 command = r.recognize_google(audio)\n",
    "#                 processcommand(command)\n",
    "#             elif word.lower() == \"ohkay\":\n",
    "#                 speak(\"its my job my sir\")\n",
    "#         except Exception as e:\n",
    "#             print(\"Error {0}\".format(e))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "12a34cd6-df5b-4f39-9fc3-ac98e0bf34fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Recognizing...\n",
      "Listening...\n",
      "Sorry, I did not understand that.\n",
      "Recognizing...\n",
      "Listening...\n",
      "Sorry, I did not understand that.\n",
      "Recognizing...\n",
      "Listening...\n",
      "Sorry, I did not understand that.\n",
      "Recognizing...\n",
      "Listening...\n",
      "Recognized word: hello\n",
      "Friday is active...\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[3], line 48\u001b[0m\n\u001b[0;32m     46\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m sr\u001b[38;5;241m.\u001b[39mMicrophone() \u001b[38;5;28;01mas\u001b[39;00m source:\n\u001b[0;32m     47\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFriday is active...\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m---> 48\u001b[0m     audio \u001b[38;5;241m=\u001b[39m \u001b[43mr\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mlisten\u001b[49m\u001b[43m(\u001b[49m\u001b[43msource\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m5\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mphrase_time_limit\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m5\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[0;32m     49\u001b[0m command \u001b[38;5;241m=\u001b[39m r\u001b[38;5;241m.\u001b[39mrecognize_google(audio)\n\u001b[0;32m     50\u001b[0m processcommand(command)\n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\speech_recognition\\__init__.py:523\u001b[0m, in \u001b[0;36mRecognizer.listen\u001b[1;34m(self, source, timeout, phrase_time_limit, snowboy_configuration)\u001b[0m\n\u001b[0;32m    520\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m phrase_time_limit \u001b[38;5;129;01mand\u001b[39;00m elapsed_time \u001b[38;5;241m-\u001b[39m phrase_start_time \u001b[38;5;241m>\u001b[39m phrase_time_limit:\n\u001b[0;32m    521\u001b[0m     \u001b[38;5;28;01mbreak\u001b[39;00m\n\u001b[1;32m--> 523\u001b[0m buffer \u001b[38;5;241m=\u001b[39m \u001b[43msource\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstream\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mread\u001b[49m\u001b[43m(\u001b[49m\u001b[43msource\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mCHUNK\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    524\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(buffer) \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m: \u001b[38;5;28;01mbreak\u001b[39;00m  \u001b[38;5;66;03m# reached end of the stream\u001b[39;00m\n\u001b[0;32m    525\u001b[0m frames\u001b[38;5;241m.\u001b[39mappend(buffer)\n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\speech_recognition\\__init__.py:199\u001b[0m, in \u001b[0;36mMicrophone.MicrophoneStream.read\u001b[1;34m(self, size)\u001b[0m\n\u001b[0;32m    198\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mread\u001b[39m(\u001b[38;5;28mself\u001b[39m, size):\n\u001b[1;32m--> 199\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpyaudio_stream\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mread\u001b[49m\u001b[43m(\u001b[49m\u001b[43msize\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mexception_on_overflow\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\pyaudio\\__init__.py:570\u001b[0m, in \u001b[0;36mPyAudio.Stream.read\u001b[1;34m(self, num_frames, exception_on_overflow)\u001b[0m\n\u001b[0;32m    567\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_is_input:\n\u001b[0;32m    568\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mIOError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNot input stream\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    569\u001b[0m                   paCanNotReadFromAnOutputOnlyStream)\n\u001b[1;32m--> 570\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mpa\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mread_stream\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_stream\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnum_frames\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    571\u001b[0m \u001b[43m                      \u001b[49m\u001b[43mexception_on_overflow\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "import speech_recognition as sr\n",
    "import pyttsx3\n",
    "import webbrowser\n",
    "# Assuming you have a Music_library module available\n",
    "# import Music_library\n",
    "\n",
    "# Initialize the speech engine\n",
    "engine = pyttsx3.init()\n",
    "\n",
    "def speak(text):\n",
    "    engine.say(text)\n",
    "    engine.runAndWait()\n",
    "\n",
    "def processcommand(c):\n",
    "    c = c.lower()\n",
    "    if \"open google\" in c:\n",
    "        webbrowser.open(\"https://google.com/\")\n",
    "    elif \"open youtube\" in c:\n",
    "        webbrowser.open(\"https://youtube.com/\")\n",
    "    elif c.startswith(\"play \"):\n",
    "        song = c.split(\" \")[1]\n",
    "        # Check your Music_library module\n",
    "        # if song in Music_library.music:\n",
    "        #     link = Music_library.music[song]\n",
    "        #     webbrowser.open(link)\n",
    "        # else:\n",
    "        #     speak(\"No such song is present in music library\")\n",
    "        # For now, just notify that the song was not found\n",
    "        speak(\"No such song is present in the music library\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    speak(\"Initializing\")\n",
    "    while True:\n",
    "        r = sr.Recognizer()\n",
    "        \n",
    "        print(\"Recognizing...\")\n",
    "        try:\n",
    "            with sr.Microphone() as source:\n",
    "                print(\"Listening...\")\n",
    "                audio = r.listen(source, timeout=5, phrase_time_limit=5)\n",
    "            word = r.recognize_google(audio)\n",
    "            print(f\"Recognized word: {word.lower()}\")\n",
    "\n",
    "            if word.lower() == \"hello\":\n",
    "                speak(\"suu che\")\n",
    "                with sr.Microphone() as source:\n",
    "                    print(\"Friday is active...\")\n",
    "                    audio = r.listen(source, timeout=5, phrase_time_limit=5)\n",
    "                command = r.recognize_google(audio)\n",
    "                processcommand(command)\n",
    "            elif word.lower() == \"ok\":\n",
    "                speak(\"its my job my sir\")\n",
    "        except sr.UnknownValueError:\n",
    "            print(\"Sorry, I did not understand that.\")\n",
    "        except sr.RequestError as e:\n",
    "            print(f\"Request error: {e}\")\n",
    "        except Exception as e:\n",
    "            print(f\"Unexpected error: {e}\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.12",
   "language": "python",
   "name": "python312"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
